name: Scheduled Playwright Tests

on:
  schedule:
    # Run every 2 days at 9 PM CDT (2 AM UTC next day)
    - cron: '0 2 */2 * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run e2e:install

      - name: Run Playwright tests
        run: npm run e2e
        env:
          CI: true

      - name: Create or update test report issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;

            // Generate report content
            const reportContent = [
              '## Test Execution Report',
              `Date: ${new Date().toISOString()}`,
              `Repository: ${context.repo.owner}/${context.repo.repo}`,
              `Branch: ${context.ref}`,
              `Commit: ${context.sha}`,
              '',
              '### Test Results',
              '```',
              fs.readFileSync('playwright-report/test-results.txt', 'utf8'),
              '```',
              '',
              `[View Workflow Run](${run_url})`
            ].join('\n');

            // Determine issue title and labels based on test status
            const isFailure = process.env.TEST_STATUS === 'failure';
            const title = isFailure
              ? `test: Some e2e tests failed - ${new Date().toISOString()}`
              : `Test Report - ${new Date().toISOString()}`;
            const labels = isFailure ? ['test-failure'] : ['test-report'];

            // Search for existing issue
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels,
              state: 'open'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes(isFailure ? 'test: Some e2e tests failed' : 'Test Report') &&
              issue.body.includes(run_url)
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: existingIssue.number,
                title,
                body: reportContent
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner,
                repo,
                title,
                body: reportContent,
                labels
              });
            }
